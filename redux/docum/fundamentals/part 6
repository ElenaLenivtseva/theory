Redux Fundamentals, Part 6: Async Logic and Data Fetching
Снова говорят про rtk. И ещё про rtk query
Some common kinds of side effects are things like:

Logging a value to the console
Saving a file
Setting an async timer
Making an AJAX HTTP request
Modifying some state that exists outside of a function, or mutating arguments to a function
Generating random numbers or unique random IDs (such as Math.random() or Date.now())
В редьюсере их быть не должно
Тогда куда их?
Есть такая штука middleware
Оно перехватывает action, пока его несёт dispatch к редьюсерк 
Что-то с этим action Middleware делает и уже изменённый отправляет дальле
И мидлваре есть и getState, и dispatch. Т.е. делай, что хочешь
Пример с аснхронной логикой
import { client } from '../api/client'

const delayedActionMiddleware = storeAPI => next => action => {
if (action.type === 'todos/todoAdded') {
setTimeout(() => {
// Delay this action by one second
next(action)
}, 1000)
return
}

return next(action)
}

const fetchTodosMiddleware = storeAPI => next => action => {
if (action.type === 'todos/fetchTodos') {
// Make an API call to fetch todos from the server
client.get('todos').then(todos => {
// Dispatch an action with the todos we received
storeAPI.dispatch({ type: 'todos/todosLoaded', payload: todos })
})
}

return next(action)
}
What if we wrote a middleware that let us pass a function to dispatch, instead of an action object?
const asyncFunctionMiddleware = storeAPI => next => action => {
// If the "action" is actually a function instead...
if (typeof action === 'function') {
// then call the function and pass `dispatch` and `getState` as arguments
return action(storeAPI.dispatch, storeAPI.getState)
}

// Otherwise, it's a normal action - send it onwards
return next(action)
}
Потом
const middlewareEnhancer = applyMiddleware(asyncFunctionMiddleware)
const store = createStore(rootReducer, middlewareEnhancer)

// Write a function that has `dispatch` and `getState` as arguments
const fetchSomeData = (dispatch, getState) => {
// Make an async HTTP request
client.get('todos').then(todos => {
// Dispatch an action with the todos we received
dispatch({ type: 'todos/todosLoaded', payload: todos })
// Check the updated store state after dispatching
const allTodos = getState().todos
console.log('Number of todos after loading: ', allTodos.length)
})
}

// Pass the _function_ we wrote to `dispatch`
store.dispatch(fetchSomeData)
// logs: 'Number of todos after loading: ###'
Again, notice that this "async function middleware" let us pass a function to dispatch! Inside that function, we were able to write some async logic (an HTTP request), then dispatch a normal action object when the request completed.
Using the Redux Thunk Middleware
Thunk - это кусок кода с задержкой
The thunk middleware allows us to write functions that get dispatch and getState as argument
Крч это типо обертка, шаблон для переиспользовпния 
Writing async logic as thunk functions allows us to reuse that logic without knowing what Redux store we're using ahead of time.

INFO
npm install redux-thunk
Как юзать? Честно, в туториал пх на ютубе было яснее, чем в документации. Я запуталась, с практикой у них все очень плохо прописано
SUMMARY
Redux middleware were designed to enable writing logic that has side effects
"Side effects" are code that changes state/behavior outside a function, like AJAX calls, modifying function arguments, or generating random values
Middleware add an extra step to the standard Redux data flow
Middleware can intercept other values passed to dispatch
Middleware have access to dispatch and getState, so they can dispatch more actions as part of async logic
The Redux "Thunk" middleware lets us pass functions to dispatch
"Thunk" functions let us write async logic ahead of time, without knowing what Redux store is being used
A Redux thunk function receives dispatch and getState as arguments, and can dispatch actions like "this data was received from an API response"