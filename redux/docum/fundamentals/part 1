Глава 1
Redux is a pattern and library for managing and updating application state, using events called "actions". It serves as a centralized store for state that needs to be used across your entire application, with rules ensuring that the state can only be updated in a predictable fashion.
The patterns and tools provided by Redux make it easier to understand when, where, why, and how the state in your application is being updated, and how your application logic will behave when those changes occur.
+ хорошая тестируемость
Нужен ток в сложных и средних-юольших приложениях
Т.е. не везде
У редакса есть ещё пакеиы
React-redux
Штука спец для работы с реаки
Redux toolkit
Икона редакса, они просто весь раздел говорят, что молятся на него. Т.е. у редакса куча сложностей, а вот редакс тулкит уже не такой сложный, продвинутый. Рекомендуют именно его
Redux DevTools Extension
Штука для браузреа, чтобы деббажить. Можно даже прыгать во времени по состоянию
Redux Basics
Ток про чистый редакс
Store типо глобальный стейт
Хранилище
Простой js объект, но чуть отличается
Например, его нельзя мутировать(точнее не стоит, технически-то можно)
Все через редьюсер меняется 
Редьюсеры работают с экшенами, экшены передают через диспатч
Есть подписчики
State, Actions, and Reducers
// Define an initial state value for the app
const initialState = {
value: 0
}
// Create a "reducer" function that determines what the new state
// should be when something happens in the app
function counterReducer(state = initialState, action) {
// Reducers usually look at the type of action that happened
// to decide how to update the state
switch (action.type) {
case 'counter/incremented':
return { ...state, value: state.value + 1 }
case 'counter/decremented':
return { ...state, value: state.value - 1 }
default:
// If the reducer doesn't care about this action type,
// return the existing state unchanged
return state
}
}
In this case, we use the word 'counter' as the first half of our action type, and the second half is a description of "what happened". In this case, our 'counter' was 'incremented', so we write the action type as 'counter/incremented'.
Типо 1 - где, 2 - что. В rtk это кстати автоматом ставится в название. Сильно забежала вперед
Store
Now that we have a reducer function, we can create a store instance by calling the Redux library createStore API.

// Create a new Redux store with the `createStore` function,
// and use the `counterReducer` for the update logic
const store = Redux.createStore(counterReducer)
UI подписота
// Our "user interface" is some text in a single HTML element
const valueEl = document.getElementById('value')

// Whenever the store state changes, update the UI by
// reading the latest store state and showing new data
function render() {
const state = store.getState()
valueEl.innerHTML = state.value.toString()
}

// Update the UI with the initial data
render()
// And subscribe to redraw whenever the data changes in the future
store.subscribe(render)
Dispatch
// Handle user inputs by "dispatching" action objects,
// which should describe "what happened" in the app
document.getElementById('increment').addEventListener('click', function () {
store.dispatch({ type: 'counter/incremented' })
})

document.getElementById('decrement').addEventListener('click', function () {
store.dispatch({ type: 'counter/decremented' })
})

document
.getElementById('incrementIfOdd')
.addEventListener('click', function () {
// We can write logic to decide what to do based on the state
if (store.getState().value % 2 !== 0) {
store.dispatch({ type: 'counter/incremented' })
}
})

document
.getElementById('incrementAsync')
.addEventListener('click', function () {
// We can also write async logic that interacts with the store
setTimeout(function () {
store.dispatch({ type: 'counter/incremented' })
}, 1000)
})
Data flow, без учёта асинхронности